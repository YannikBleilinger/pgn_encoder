package main

import (
	"bufio"
	"database/sql"
	"fmt"
	"github.com/corentings/chess/v2"
	_ "github.com/mattn/go-sqlite3"
	"io"
	"log"
	"os"
	"runtime"
	"runtime/pprof"
	"strconv"
	"strings"
	"sync"
)

// todo: add repetitions integer in global vector
// hash map if pos1 == pos2 replace if elo1 < elo2
// compare +1 for same piece + color indicator or +1/-1 one hot vector

/**
	Moves can be between 0 and 4287 where
	0-87 (8*4*3) promotion squares for black (8 start squares, 4 promotion pieces, 3 end relative end squares)
	88-4184 (64*64) all moves between squares
	4184-4271 (8*4*3) promotions squares for white
**/

type posRecord struct {
	elo   int
	index int64
}

type fileCmd struct {
	cmdType string // append or update
	data    []byte
	offset  int64      // used for update
	result  chan int64 // used for append to return offset
}

type positionStruct struct {
	fen  string // fen string
	move int16  // 0 - 4160
	elo  int16
}

const recordSize = 65*7 + 2

//TIP <p>To run your code, right-click the code and select <b>Run</b>.</p> <p>Alternatively, click
// the <icon src="AllIcons.Actions.Execute"/> icon in the gutter and select the <b>Run</b> menu item from here.</p>

func check(e error) {
	if e != nil {
		fmt.Printf("ERROR: %v\n", e)
	}
}

func main() {

	dataPath := "D:\\ChessGPT Data\\Okt_2024\\data.pgn"
	//dataPath := "/home/ybleilinger/chessGPT/chessVenv/data/temp/lichess_db_standard_rated_2023-08.pgn"
	//outPath := ".\\files\\encoded_positions.bin"
	numWorkers := runtime.NumCPU() - 1

	cpuF, err := os.Create("cpu.prof")
	check(err)
	memF, err := os.Create("mem.prof")
	check(err)
	defer cpuF.Close()
	defer memF.Close()
	check(err)
	err = pprof.StartCPUProfile(cpuF)
	check(err)
	defer pprof.StopCPUProfile()

	f, err := os.Open(dataPath)
	check(err)
	defer f.Close()

	// database
	db, err := sql.Open("sqlite3", ".\\files\\chess.db")
	check(err)
	defer db.Close()

	createTableSQL := `
	CREATE TABLE IF NOT EXISTS positions (
	    fen TEXT PRIMARY KEY,
	    move INTEGER CHECK(move BETWEEN 0 AND 4287),
	    elo INTEGER
	)`

	_, err = db.Exec(createTableSQL)
	check(err)

	scanner := bufio.NewScanner(f)
	gameChan := make(chan string, 200_000)
	fileCmdChan := make(chan fileCmd, 1_000_000)
	posChan := make(chan positionStruct, 1_000_000)
	var wgWrite sync.WaitGroup
	var wgParse sync.WaitGroup
	//var seen sync.Map

	wgWrite.Add(1)
	go databaseWriter(posChan, db, &wgWrite)
	//go fileWriter(&wgWrite, fileCmdChan, outPath)
	for i := 0; i < numWorkers; i++ {
		wgParse.Add(1)
		//go pgnToFen(gameChan, &wgParse, &seen, fileCmdChan)
		go pgnToFen(gameChan, &wgParse, posChan)
	}
	totalGames := 200_000
	currentGames := 0
	fmt.Println("Starting to process games")
	var chunk strings.Builder
	emptyLines := 0
	for scanner.Scan() {
		line := scanner.Text()
		// If line is empty, increase the empty line counter
		if len(strings.TrimSpace(line)) == 0 {
			chunk.WriteString("\n")
			emptyLines++
			if emptyLines == 2 {
				// Send the accumulated game to the channel
				gameChan <- chunk.String()
				currentGames++
				chunk.Reset()  // Reset chunk for the next game
				emptyLines = 0 // Reset empty line counter

				// Print progress
				if currentGames%20_000 == 0 {
					fmt.Printf("Games processed: %v\n", currentGames)
				}

				// Stop if totalGames limit is reached
				if currentGames == totalGames {
					break
				}
				emptyLines = 0
			}
			continue // Skip appending empty lines to the chunk
		}
		chunk.WriteString(line + "\n")
	}

	if err := scanner.Err(); err != nil {
		log.Fatalf("Scan failed: %v", err)
	}
	close(gameChan)
	wgParse.Wait()
	close(fileCmdChan)
	close(posChan)
	wgWrite.Wait()

	err = pprof.WriteHeapProfile(memF)
}

func pgnToFen(c <-chan string, wg *sync.WaitGroup, posChan chan positionStruct) {
	defer wg.Done()
	for pgnString := range c {
		pgn, err := chess.PGN(strings.NewReader(pgnString))
		check(err)
		game := chess.NewGame(pgn)
		for i, position := range game.Positions() {
			// skip last "checkmate" board state
			if i == len(game.Positions())-1 {
				break
			}

			move := game.Moves()[i]
			var moveIdx int16 = -1
			if move.Promo() != chess.NoPieceType {
				moveIdx = getPromotionMoveIdx(move, position.Turn())
			} else {
				moveIdx = int16(move.S1())*64 + int16(move.S2()) + (8 * 3 * 4)
			}
			// get elo from player on turn
			var currentElo int16
			if position.Turn() == chess.White {
				elo, err := strconv.ParseInt(game.GetTagPair("WhiteElo"), 10, 64)
				currentElo = int16(elo)
				check(err)
			} else {
				elo, err := strconv.ParseInt(game.GetTagPair("BlackElo"), 10, 64)
				currentElo = int16(elo)
				check(err)
			}
			posChan <- positionStruct{game.FEN(), moveIdx, currentElo}
		}
	}
}

func processPGN(c chan string, wg *sync.WaitGroup, seen *sync.Map, fileCmdChan chan fileCmd) {
	defer wg.Done()
	//resultCh := make(chan int64, 1)
	for pgnString := range c {
		pgn, err := chess.PGN(strings.NewReader(pgnString))
		check(err)
		game := chess.NewGame(pgn)
		for i, position := range game.Positions() {
			// skip last "checkmate" board state
			if i == len(game.Positions())-1 {
				break
			}
			move := game.Moves()[i] // move for current position
			moveStart := int8(move.S1())
			moveEnd := int8(move.S2())
			// if a move is a promotion ove
			switch move.Promo() {
			case chess.Queen:
			case chess.Rook:
			case chess.Bishop:
			case chess.Knight:
			default:

			}

			var rec [recordSize]byte
			pos := 0
			// serialize board
			board := position.Board()
			for row := 0; row < 65; row++ {
				var v [7]int8
				if row == 0 {
					v = getGlobalVector(position)
				} else {
					v = getSquareVector(board.Piece(chess.Square(row - 1)))
				}
				for col := 0; col < 7; col++ {
					rec[pos] = byte(v[col])

					//rec[pos] = byte(uint8(encodedBoard[row][col]))
					pos++
				}
			}

			rec[pos] = byte(moveStart)
			rec[pos+1] = byte(moveEnd)
			// get elo from player on turn
			var currentElo int
			if position.Turn() == chess.White {
				elo, err := strconv.ParseInt(game.GetTagPair("WhiteElo"), 10, 64)
				currentElo = int(elo)
				check(err)
			} else {
				elo, err := strconv.ParseInt(game.GetTagPair("BlackElo"), 10, 64)
				currentElo = int(elo)
				check(err)
			}
			fmt.Println(currentElo)
		}
	}
}

// vector: [color, isKing, isQueen, isRook, isBishop, isKnight, isPawn]
func getSquareVector(piece chess.Piece) [7]int8 {
	var vector [7]int8
	var sigColor int8 = 0
	// set color at index 0
	if piece.Color() == chess.White {
		sigColor = 1
	} else {
		sigColor = -1
	}

	vector[0] = sigColor
	index := -1
	switch piece.Type() {
	case chess.King:
		index = 1
	case chess.Queen:
		index = 2
	case chess.Rook:
		index = 3
	case chess.Bishop:
		index = 4
	case chess.Knight:
		index = 5
	case chess.Pawn:
		index = 6
	default:
		return [7]int8{}
	}
	vector[index] = 1 // -1 for black, 1 for white
	return vector
}

func getGlobalVector(position *chess.Position) [7]int8 {
	var vector [7]int8
	var castlingRights = position.CastleRights()
	// set castling rights
	if castlingRights.CanCastle(chess.White, chess.KingSide) {
		vector[0] = 1
	}
	if castlingRights.CanCastle(chess.White, chess.QueenSide) {
		vector[1] = 1
	}
	if castlingRights.CanCastle(chess.Black, chess.KingSide) {
		vector[2] = 1
	}
	if castlingRights.CanCastle(chess.Black, chess.QueenSide) {
		vector[3] = 1
	}

	// set en passant square
	enPassantSquare := position.EnPassantSquare()
	if enPassantSquare != chess.NoSquare {
		vector[4] = int8(enPassantSquare)
	} else {
		vector[4] = 0
	}
	// set turn
	if position.Turn() == chess.White {
		vector[5] = 1
	} else {
		vector[5] = -1
	}

	vector[6] = int8(position.HalfMoveClock())
	return vector
}

func fileWriter(wg *sync.WaitGroup, fileCmdChan <-chan fileCmd, outPath string) {
	defer wg.Done()
	storedGames := 0
	updatedGames := 0
	outFile, err := os.OpenFile(outPath, os.O_RDWR|os.O_CREATE, 0664)
	check(err)
	defer outFile.Close()

	bufferedWriter := bufio.NewWriter(outFile)
	defer bufferedWriter.Flush()

	for cmd := range fileCmdChan {
		switch cmd.cmdType {
		case "append":
			// move to end of file
			_, err := outFile.Seek(0, io.SeekEnd)
			check(err)
			// record current offset
			offset, err := outFile.Seek(0, io.SeekCurrent)
			check(err)
			// write new record
			_, err = bufferedWriter.Write(cmd.data)
			check(err)

			check(err)
			// return offset
			cmd.result <- offset
			storedGames++

		case "update":
			_, err := outFile.Seek(cmd.offset, io.SeekStart)
			check(err)
			_, err = outFile.Write(cmd.data)
			check(err)
			updatedGames++
		}

		if storedGames%1_000_000 == 0 {
			fmt.Printf("Stored Positions: %v, updated positions: %v\n", storedGames, updatedGames)
		}

	}
	fmt.Printf("FINAL: Stored Positions: %v, updated positions: %v\n", storedGames, updatedGames)
}

func databaseWriter(positionChan <-chan positionStruct, db *sql.DB, wg *sync.WaitGroup) {
	defer wg.Done()
	tx, err := db.Begin()
	check(err)
	storedGames := 0
	updatedGames := 0
	for pos := range positionChan {
		var storedElo int16
		err = tx.QueryRow("SELECT elo FROM positions WHERE fen = ?", pos.fen).Scan(&storedElo)
		if err == sql.ErrNoRows {
			storedGames++
			// no position found so we insert
			_, err = tx.Exec("INSERT INTO positions (fen, move, elo) VALUES (?, ?, ?)", pos.fen, pos.move, pos.elo)
			if err != nil {
				tx.Rollback()
				fmt.Printf("ERROR in insert: %v\n", err)
			}
		} else if err == nil {
			// Update if new elo is higher
			if pos.elo > storedElo {
				updatedGames++
				_, err := tx.Exec("UPDATE positions SET move = ?, elo = ? WHERE fen = ?", pos.move, pos.elo, pos.fen)
				if err != nil {
					tx.Rollback()
					fmt.Printf("ERROR in update: %v\n", err)
				}
			}
		}
		if storedGames%1_000_000 == 0 {
			fmt.Printf("Pos inserted: %v, pos updated: %v", storedGames, updatedGames)
		}
	}
	err = tx.Commit()
	check(err)
}

func getPromotionMoveIdx(move *chess.Move, color chess.Color) int16 {
	var moveIdx int16 = -1
	startFile := int16(move.S1().File())
	endFile := int16(move.S2().File())
	diff := endFile - startFile + 1
	moveIdx = startFile*12 + diff*4

	// if white add to end of all move idx
	if color == chess.White {
		moveIdx += 64*64 + 87
	}
	// get promotion piece value
	switch move.Promo() {
	case chess.Queen:
		moveIdx += 0
	case chess.Rook:
		moveIdx += 1
	case chess.Bishop:
		moveIdx += 2
	case chess.Knight:
		moveIdx += 3
	default:
		panic("Promotion piece is fucked")
	}
	return moveIdx - 4
}

func testPromotionIndex() {
	startRank := chess.Rank7
	startFiles := []chess.File{chess.FileA, chess.FileB, chess.FileC, chess.FileD, chess.FileE, chess.FileF, chess.FileG, chess.FileH}
	endRank := chess.Rank8

	endFiles := make([][]chess.File, 8)
	endFiles[0] = []chess.File{chess.FileA, chess.FileB}
	endFiles[1] = []chess.File{chess.FileA, chess.FileB, chess.FileC}
	endFiles[2] = []chess.File{chess.FileB, chess.FileC, chess.FileD}
	endFiles[3] = []chess.File{chess.FileC, chess.FileD, chess.FileE}
	endFiles[4] = []chess.File{chess.FileD, chess.FileE, chess.FileF}
	endFiles[5] = []chess.File{chess.FileE, chess.FileF, chess.FileG}
	endFiles[6] = []chess.File{chess.FileF, chess.FileG, chess.FileH}
	endFiles[7] = []chess.File{chess.FileG, chess.FileH}

	promPieces := []chess.PieceType{chess.Queen, chess.Rook, chess.Bishop, chess.Knight}

	for i := 0; i < 8; i++ {
		for j := 0; j < 3; j++ {
			for _, p := range promPieces {
				if (i == 0 && j == 2) || (i == 7 && j == 2) {
					continue
				}
				startSquare := chess.NewSquare(startFiles[i], startRank)
				endSquare := chess.NewSquare(endFiles[i][j], endRank)
				move := chess.Move{}
				move.SetStartSquare(startSquare)
				move.SetEndSquare(endSquare)
				move.SetPromoPiece(p)

				fmt.Printf("Move: %v, Index: %v\n", move.String(), getPromotionMoveIdx(&move, chess.White))
			}
		}
	}
}
